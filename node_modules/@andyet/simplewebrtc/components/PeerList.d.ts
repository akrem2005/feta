import * as React from 'react';
import { Peer } from '../Definitions';
export interface PeerListProps {
    room: string;
    joinedCall?: boolean;
    speaking?: boolean;
    chatState?: 'active' | 'composing' | 'paused';
    requestingAttention?: boolean;
    includeSelf?: boolean;
    filter?: (peer: Peer) => boolean;
    sort?: (peer: Peer, otherPeer: Peer) => number;
    peers?: Peer[];
    render?: (props: PeerListRenderProps) => React.ReactNode;
    children?: React.ReactNode | ((props: PeerListRenderProps) => React.ReactNode);
}
export interface PeerListRenderProps {
    peers: Peer[];
    chatState?: 'active' | 'composing' | 'paused';
    joinedCall: boolean;
    speaking: boolean;
}
/**
 * @description
 *
 * @public
 *
 */
declare class PeerList extends React.Component<PeerListProps, any> {
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
}
declare const _default: import("react-redux").ConnectedComponent<typeof PeerList, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<PeerList> | undefined;
    room: string;
    joinedCall?: boolean | undefined;
    speaking?: boolean | undefined;
    chatState?: "active" | "paused" | "composing" | undefined;
    requestingAttention?: boolean | undefined;
    includeSelf?: boolean | undefined;
    filter?: ((peer: Peer) => boolean) | undefined;
    sort?: ((peer: Peer, otherPeer: Peer) => number) | undefined;
    peers?: Peer[] | undefined;
    render?: ((props: PeerListRenderProps) => React.ReactNode) | undefined;
    children?: React.ReactNode | ((props: PeerListRenderProps) => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
