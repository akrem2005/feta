import * as React from 'react';
import { Chat, Peer } from '../Definitions';
import { ChatState } from '../reducers/Chats';
import { PeerState } from '../reducers/Peers';
export interface NotificationProps {
    onChatSent?: (chat: Chat) => void;
    onChatReceived?: (chat: Chat) => void;
    onPeerEntered?: (peer: Peer) => void;
    onPeerLeft?: (peer: Peer) => void;
    onNoPeersRemaining?: () => void;
    chats?: ChatState;
    peers?: PeerState;
    render?: () => React.ReactNode;
    children?: React.ReactNode | (() => React.ReactNode);
}
/**
 * @description
 *
 * @public
 */
declare class Notifications extends React.Component<NotificationProps, any> {
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
    componentDidUpdate(prevProps: NotificationProps): void;
}
declare const _default: import("react-redux").ConnectedComponent<typeof Notifications, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<Notifications> | undefined;
    onChatSent?: ((chat: Chat) => void) | undefined;
    onChatReceived?: ((chat: Chat) => void) | undefined;
    onPeerEntered?: ((peer: Peer) => void) | undefined;
    onPeerLeft?: ((peer: Peer) => void) | undefined;
    onNoPeersRemaining?: (() => void) | undefined;
    chats?: ChatState | undefined;
    peers?: PeerState | undefined;
    render?: (() => React.ReactNode) | undefined;
    children?: React.ReactNode | (() => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
