import * as React from 'react';
import * as Actions from '../actions';
import { User } from '../Definitions';
export interface UserControlsProps {
    user?: User;
    customerData?: object;
    hasAudio?: boolean;
    hasVideo?: boolean;
    hasScreenCapture?: boolean;
    isDeafened?: boolean;
    isMuted?: boolean;
    isPaused?: boolean;
    isScreenCapturePaused?: boolean;
    isSpeaking?: boolean;
    isSpeakingWhileMuted?: boolean;
    deafen?: () => void;
    undeafen?: () => void;
    mute?: () => void;
    unmute?: () => void;
    pauseVideo?: (opts?: Actions.SelfVideoOptions) => void;
    resumeVideo?: (opts?: Actions.SelfVideoOptions) => void;
    setDisplayName?: (name: string) => void;
    setAudioOutputDevice?: (deviceId: string) => void;
    setVoiceActivityThreshold?: (threshold: number) => void;
    setGlobalVolumeLimit?: (volumeLimit: number) => void;
    render?: (props: UserControlsRenderProps) => React.ReactNode;
    children?: React.ReactNode | ((props: UserControlsRenderProps) => React.ReactNode);
}
export interface UserControlsRenderProps {
    user: User;
    customerData: object;
    hasAudio: boolean;
    hasVideo: boolean;
    hasScreenCapture: boolean;
    isDeafened: boolean;
    isMuted: boolean;
    isPaused: boolean;
    isScreenCapturePaused?: boolean;
    isSpeaking: boolean;
    isSpeakingWhileMuted: boolean;
    deafen: () => void;
    undeafen: () => void;
    mute: () => void;
    unmute: () => void;
    pauseVideo: (opts?: Actions.SelfVideoOptions) => void;
    resumeVideo: (opts?: Actions.SelfVideoOptions) => void;
    setAudioOutputDevice: (deviceId: string) => void;
    setDisplayName: (name: string) => void;
    setVoiceActivityThreshold: (threshold: number) => void;
    setGlobalVolumeLimit: (volumeLimit: number) => void;
}
/**
 * @description
 *
 * @public
 *
 */
export declare class UserControls extends React.Component<UserControlsProps, any> {
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
}
declare const _default: import("react-redux").ConnectedComponent<typeof UserControls, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<UserControls> | undefined;
    user?: User | undefined;
    customerData?: object | undefined;
    hasAudio?: boolean | undefined;
    hasVideo?: boolean | undefined;
    hasScreenCapture?: boolean | undefined;
    isDeafened?: boolean | undefined;
    isMuted?: boolean | undefined;
    isPaused?: boolean | undefined;
    isScreenCapturePaused?: boolean | undefined;
    isSpeaking?: boolean | undefined;
    isSpeakingWhileMuted?: boolean | undefined;
    deafen?: (() => void) | undefined;
    undeafen?: (() => void) | undefined;
    mute?: (() => void) | undefined;
    unmute?: (() => void) | undefined;
    pauseVideo?: ((opts?: Actions.SelfVideoOptions | undefined) => void) | undefined;
    resumeVideo?: ((opts?: Actions.SelfVideoOptions | undefined) => void) | undefined;
    setDisplayName?: ((name: string) => void) | undefined;
    setAudioOutputDevice?: ((deviceId: string) => void) | undefined;
    setVoiceActivityThreshold?: ((threshold: number) => void) | undefined;
    setGlobalVolumeLimit?: ((volumeLimit: number) => void) | undefined;
    render?: ((props: UserControlsRenderProps) => React.ReactNode) | undefined;
    children?: React.ReactNode | ((props: UserControlsRenderProps) => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
