import * as React from 'react';
import { Peer, Room } from '../Definitions';
export interface CommandEvent {
    room: Room;
    peer: Peer;
    type: string;
    data: any;
}
export interface CustomCommandProps {
    room: string;
    signalingClient?: any;
    sendRoomCommand?: (datatype: string, data?: any) => void;
    sendPeerCommand?: (peerAddress: string, datatype: string, data?: any) => void;
    onRoomCommand?: (event: CommandEvent) => void;
    onPeerCommand?: (event: CommandEvent) => void;
    render?: (props: CustomCommandRenderProps) => React.ReactNode;
    children?: React.ReactNode | ((props: CustomCommandRenderProps) => React.ReactNode);
}
export interface CustomCommandRenderProps {
    sendRoomCommand: (datatype: string, data?: any) => void;
    sendPeerCommand: (peerAddress: string, datatype: string, data?: any) => void;
}
/**
 * @description
 *
 * @public
 */
declare class CustomCommands extends React.Component<CustomCommandProps, any> {
    private commandHandler;
    constructor(props: CustomCommandProps);
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
    componentDidMount(): void;
    componentDidUpdate(prev: CustomCommandProps): void;
    componentWillUnmount(): void;
}
declare const _default: import("react-redux").ConnectedComponent<typeof CustomCommands, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<CustomCommands> | undefined;
    room: string;
    signalingClient?: any;
    sendRoomCommand?: ((datatype: string, data?: any) => void) | undefined;
    sendPeerCommand?: ((peerAddress: string, datatype: string, data?: any) => void) | undefined;
    onRoomCommand?: ((event: CommandEvent) => void) | undefined;
    onPeerCommand?: ((event: CommandEvent) => void) | undefined;
    render?: ((props: CustomCommandRenderProps) => React.ReactNode) | undefined;
    children?: React.ReactNode | ((props: CustomCommandRenderProps) => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
