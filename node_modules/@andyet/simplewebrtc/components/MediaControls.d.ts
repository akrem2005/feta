import * as React from 'react';
import { Media } from '../Definitions';
export interface MediaControlsProps {
    media: Media;
    autoRemove?: boolean;
    enableMedia?: () => void;
    disableMedia?: () => void;
    removeLocalMedia?: () => void;
    shareLocalMedia?: () => void;
    stopSharingLocalMedia?: () => void;
    render?: (props: MediaControlsRenderProps) => React.ReactNode;
    children?: React.ReactNode | ((props: MediaControlsRenderProps) => React.ReactNode);
}
export interface MediaControlsRenderProps {
    media: Media;
    enable: () => void;
    disable: () => void;
    isEnabled: boolean;
    isShared: boolean;
    remove: () => void;
    share: () => void;
    stopSharing: () => void;
}
/**
 * @description
 *
 * @public
 *
 */
export declare class MediaControls extends React.Component<MediaControlsProps, any> {
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
}
declare const _default: import("react-redux").ConnectedComponent<typeof MediaControls, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<MediaControls> | undefined;
    media: Media;
    autoRemove?: boolean | undefined;
    enableMedia?: (() => void) | undefined;
    disableMedia?: (() => void) | undefined;
    removeLocalMedia?: (() => void) | undefined;
    shareLocalMedia?: (() => void) | undefined;
    stopSharingLocalMedia?: (() => void) | undefined;
    render?: ((props: MediaControlsRenderProps) => React.ReactNode) | undefined;
    children?: React.ReactNode | ((props: MediaControlsRenderProps) => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
