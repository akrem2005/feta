"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteAudioPlayer = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const react_redux_1 = require("react-redux");
const Selectors_1 = require("../Selectors");
const Audio_1 = tslib_1.__importDefault(require("./Audio"));
/**
 * @description
 * The remote audio player component will play all enabled remote audio tracks. Only one instance needs to be used.
 *
 * @public
 *
 * @example
 * <div>
 *   {/* We can always keep the audio player around *\/}
 *   <RemoteAudioPlayer />
 *   <Connected>
 *     <p>Main app UI</p>
 *   </Connected>
 * </div>
 */
class RemoteAudioPlayer extends React.Component {
    shouldComponentUpdate(newProps) {
        if (this.props.globalVolumeLimit !== newProps.globalVolumeLimit ||
            this.props.outputDevice !== newProps.outputDevice) {
            return true;
        }
        if (!this.props.audioSources ||
            !newProps.audioSources ||
            this.props.audioSources.length !== newProps.audioSources.length) {
            return true;
        }
        for (let i = 0; i < this.props.audioSources.length; i++) {
            const currAudio = this.props.audioSources[i];
            const newAudio = newProps.audioSources[i];
            if (currAudio.media.localDisabled !== newAudio.media.localDisabled ||
                currAudio.media.remoteDisabled !== newAudio.media.remoteDisabled ||
                currAudio.media.track !== newAudio.media.track ||
                currAudio.media.id !== newAudio.media.id ||
                currAudio.volumeLimit !== newAudio.volumeLimit) {
                return true;
            }
        }
        return false;
    }
    render() {
        const sources = this.props.audioSources || [];
        const globalVolumeLimit = this.props.globalVolumeLimit;
        return (React.createElement(React.Fragment, null, sources.map(audio => (React.createElement(Audio_1.default, { key: audio.media.id, media: audio.media, volume: globalVolumeLimit * audio.volumeLimit, outputDevice: this.props.outputDevice })))));
    }
}
exports.RemoteAudioPlayer = RemoteAudioPlayer;
function mapStateToProps(state) {
    const media = (0, Selectors_1.getRemoteMedia)(state, 'audio');
    const audioSources = [];
    for (const audio of media) {
        const peer = (0, Selectors_1.getPeerByAddress)(state, audio.owner);
        audioSources.push({
            media: audio,
            volumeLimit: (peer ? peer.volumeLimit : 1) ?? 1
        });
    }
    return {
        audioSources,
        globalVolumeLimit: (0, Selectors_1.getGlobalVolumeLimit)(state),
        outputDevice: (0, Selectors_1.getAudioOutputDevice)(state)
    };
}
exports.default = (0, react_redux_1.connect)(mapStateToProps)(RemoteAudioPlayer);
