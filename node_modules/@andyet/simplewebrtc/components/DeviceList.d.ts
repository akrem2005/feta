import * as React from 'react';
export interface DeviceListProps {
    audioInput?: boolean;
    audioOutput?: boolean;
    cameraPermissionDenied?: boolean;
    cameraPermissionGranted?: boolean;
    devices?: MediaDeviceInfo[];
    hasAudioOutput?: boolean;
    hasCamera?: boolean;
    hasMicrophone?: boolean;
    microphonePermissionDenied?: boolean;
    microphonePermissionGranted?: boolean;
    requestingCameraCapture?: boolean;
    requestingCapture?: boolean;
    requestingMicrophoneCapture?: boolean;
    videoInput?: boolean;
    fetchDevices?: () => void;
    listenForDevices?: () => void;
    render?: (props: DeviceListRenderProps) => React.ReactNode;
    children?: React.ReactNode | ((props: DeviceListRenderProps) => React.ReactNode);
}
export interface DeviceListRenderProps {
    audioInput: boolean;
    audioOutput: boolean;
    cameraPermissionDenied: boolean;
    cameraPermissionGranted: boolean;
    devices: MediaDeviceInfo[];
    hasAudioOutput: boolean;
    hasCamera: boolean;
    hasMicrophone: boolean;
    microphonePermissionDenied: boolean;
    microphonePermissionGranted: boolean;
    requestingCameraCapture?: boolean;
    requestingCapture?: boolean;
    requestingMicrophoneCapture?: boolean;
    videoInput: boolean;
}
/**
 * @description
 *
 * @public
 *
 */
declare class DeviceList extends React.Component<DeviceListProps, any> {
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
}
declare const _default: import("react-redux").ConnectedComponent<typeof DeviceList, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<DeviceList> | undefined;
    audioInput?: boolean | undefined;
    audioOutput?: boolean | undefined;
    cameraPermissionDenied?: boolean | undefined;
    cameraPermissionGranted?: boolean | undefined;
    devices?: MediaDeviceInfo[] | undefined;
    hasAudioOutput?: boolean | undefined;
    hasCamera?: boolean | undefined;
    hasMicrophone?: boolean | undefined;
    microphonePermissionDenied?: boolean | undefined;
    microphonePermissionGranted?: boolean | undefined;
    requestingCameraCapture?: boolean | undefined;
    requestingCapture?: boolean | undefined;
    requestingMicrophoneCapture?: boolean | undefined;
    videoInput?: boolean | undefined;
    fetchDevices?: (() => void) | undefined;
    listenForDevices?: (() => void) | undefined;
    render?: ((props: DeviceListRenderProps) => React.ReactNode) | undefined;
    children?: React.ReactNode | ((props: DeviceListRenderProps) => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
