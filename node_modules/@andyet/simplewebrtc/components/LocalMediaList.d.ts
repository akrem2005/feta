import * as React from 'react';
import { Media } from '../Definitions';
export interface LocalMediaListProps {
    remote?: boolean;
    local?: boolean;
    audio?: boolean;
    video?: boolean;
    screen?: boolean;
    shared?: boolean;
    media?: Media[];
    removeMedia?: (id: string) => void;
    shareLocalMedia?: (id: string) => void;
    stopSharingLocalMedia?: (id: string) => void;
    onMediaAdded?: (media: Media) => void;
    onMediaRemoved?: (media: Media) => void;
    render?: (props: LocalMediaListRenderProps) => React.ReactNode;
    children?: React.ReactNode | ((props: LocalMediaListRenderProps) => React.ReactNode);
}
export interface LocalMediaListRenderProps {
    media: Media[];
    remote?: boolean;
    local?: boolean;
    audio?: boolean;
    video?: boolean;
    shared?: boolean;
    screen?: boolean;
    removeMedia: (id: string) => void;
    shareLocalMedia: (id: string) => void;
    stopSharingLocalMedia: (id: string) => void;
}
/**
 * @description
 *
 * @public
 *
 */
declare class LocalMediaList extends React.Component<LocalMediaListProps, any> {
    componentDidUpdate(prevProps: LocalMediaListProps): void;
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
}
declare const _default: import("react-redux").ConnectedComponent<typeof LocalMediaList, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<LocalMediaList> | undefined;
    remote?: boolean | undefined;
    local?: boolean | undefined;
    audio?: boolean | undefined;
    video?: boolean | undefined;
    screen?: boolean | undefined;
    shared?: boolean | undefined;
    media?: Media[] | undefined;
    removeMedia?: ((id: string) => void) | undefined;
    shareLocalMedia?: ((id: string) => void) | undefined;
    stopSharingLocalMedia?: ((id: string) => void) | undefined;
    onMediaAdded?: ((media: Media) => void) | undefined;
    onMediaRemoved?: ((media: Media) => void) | undefined;
    render?: ((props: LocalMediaListRenderProps) => React.ReactNode) | undefined;
    children?: React.ReactNode | ((props: LocalMediaListRenderProps) => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
