import * as React from 'react';
import { Media } from '../Definitions';
export interface RemoteMediaListProps {
    audio?: boolean;
    video?: boolean;
    peer?: string;
    media?: Media[];
    onMediaAdded?: (media: Media) => void;
    onMediaRemoved?: (media: Media) => void;
    render?: (props: RemoteMediaListRenderProps) => React.ReactNode;
    children?: React.ReactNode | ((props: RemoteMediaListRenderProps) => React.ReactNode);
}
export interface RemoteMediaListRenderProps {
    media: Media[];
    audio?: boolean;
    video?: boolean;
    peer?: string;
}
/**
 * @description
 *
 * @public
 *
 */
declare class RemoteMediaList extends React.Component<RemoteMediaListProps, any> {
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
    componentDidUpdate(prevProps: RemoteMediaListProps): void;
}
declare const _default: import("react-redux").ConnectedComponent<typeof RemoteMediaList, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<RemoteMediaList> | undefined;
    audio?: boolean | undefined;
    video?: boolean | undefined;
    peer?: string | undefined;
    media?: Media[] | undefined;
    onMediaAdded?: ((media: Media) => void) | undefined;
    onMediaRemoved?: ((media: Media) => void) | undefined;
    render?: ((props: RemoteMediaListRenderProps) => React.ReactNode) | undefined;
    children?: React.ReactNode | ((props: RemoteMediaListRenderProps) => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
