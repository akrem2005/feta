import * as React from 'react';
export interface RequestDisplayMediaProps {
    share?: boolean;
    extensionId?: string;
    audio?: boolean;
    audioTypeHint?: undefined | 'speech' | 'music';
    videoTypeHint?: undefined | 'motion' | 'detail' | 'text';
    volumeMonitoring?: boolean;
    name?: string;
    audioName?: string;
    videoName?: string;
    replaceAudio?: string;
    replaceVideo?: string;
    addLocalAudio?: (track: MediaStreamTrack, stream: MediaStream, replaceAudio?: string, volumeMonitoring?: boolean, name?: string) => void;
    addLocalScreen?: (track: MediaStreamTrack, stream: MediaStream, replaceVideo?: string, name?: string) => void;
    shareLocalMedia?: (id: string) => void;
    render?: (getDisplayMedia: () => void, extension: RequestDisplayMediaExtensionProps) => React.ReactNode;
}
export interface RequestDisplayMediaExtensionProps {
    available: boolean;
    extensionId?: string;
    extensionRequired: boolean;
    extensionInstalled: boolean;
    extensionInstalling?: boolean;
    listenForInstallation?: (interval?: number) => void;
    ready: boolean;
}
export interface RequestDisplayMediaState {
    extensionRequired: boolean;
    extensionInstalled: boolean;
    extensionInstalling?: boolean;
}
/**
 * @description
 *
 * @public
 *
 */
export declare class RequestDisplayMedia extends React.Component<RequestDisplayMediaProps, RequestDisplayMediaState> {
    constructor(props: RequestDisplayMediaProps);
    getDisplayMedia(): Promise<void>;
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
}
declare const _default: import("react-redux").ConnectedComponent<typeof RequestDisplayMedia, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<RequestDisplayMedia> | undefined;
    share?: boolean | undefined;
    extensionId?: string | undefined;
    audio?: boolean | undefined;
    audioTypeHint?: "speech" | "music" | undefined;
    videoTypeHint?: "detail" | "text" | "motion" | undefined;
    volumeMonitoring?: boolean | undefined;
    name?: string | undefined;
    audioName?: string | undefined;
    videoName?: string | undefined;
    replaceAudio?: string | undefined;
    replaceVideo?: string | undefined;
    addLocalAudio?: ((track: MediaStreamTrack, stream: MediaStream, replaceAudio?: string | undefined, volumeMonitoring?: boolean | undefined, name?: string | undefined) => void) | undefined;
    addLocalScreen?: ((track: MediaStreamTrack, stream: MediaStream, replaceVideo?: string | undefined, name?: string | undefined) => void) | undefined;
    shareLocalMedia?: ((id: string) => void) | undefined;
    render?: ((getDisplayMedia: () => void, extension: RequestDisplayMediaExtensionProps) => React.ReactNode) | undefined;
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
