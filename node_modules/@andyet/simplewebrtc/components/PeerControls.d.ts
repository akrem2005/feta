import * as React from 'react';
import { Peer } from '../Definitions';
export interface PeerControlsProps {
    peer: Peer;
    isMuted?: boolean;
    isSpeaking?: boolean;
    hasActiveCamera?: boolean;
    hasActiveMicrophone?: boolean;
    hasActiveScreenCapture?: boolean;
    mute?: () => void;
    unmute?: () => void;
    kick?: () => void;
    setVolumeLimit?: (volume: number) => void;
    render?: (props: PeerControlsRenderProps) => React.ReactNode;
    children?: React.ReactNode | ((props: PeerControlsRenderProps) => React.ReactNode);
}
export interface PeerControlsRenderProps {
    peer: Peer;
    isMuted: boolean;
    isSpeaking: boolean;
    hasActiveCamera: boolean;
    hasActiveMicrophone: boolean;
    hasActiveScreenCapture: boolean;
    mute: () => void;
    unmute: () => void;
    kick: () => void;
    setVolumeLimit: (volume: number) => void;
}
/**
 * @description
 *
 * @public
 *
 */
export declare class PeerControls extends React.Component<PeerControlsProps, any> {
    render(): string | number | boolean | React.ReactFragment | JSX.Element | null | undefined;
}
declare const _default: import("react-redux").ConnectedComponent<typeof PeerControls, {
    key?: React.Key | null | undefined;
    ref?: React.LegacyRef<PeerControls> | undefined;
    peer: Peer;
    isMuted?: boolean | undefined;
    isSpeaking?: boolean | undefined;
    hasActiveCamera?: boolean | undefined;
    hasActiveMicrophone?: boolean | undefined;
    hasActiveScreenCapture?: boolean | undefined;
    mute?: (() => void) | undefined;
    unmute?: (() => void) | undefined;
    kick?: (() => void) | undefined;
    setVolumeLimit?: ((volume: number) => void) | undefined;
    render?: ((props: PeerControlsRenderProps) => React.ReactNode) | undefined;
    children?: React.ReactNode | ((props: PeerControlsRenderProps) => React.ReactNode);
    context?: React.Context<import("react-redux").ReactReduxContextValue<any, import("redux").AnyAction>> | undefined;
    store?: import("redux").Store<any, import("redux").AnyAction> | undefined;
}>;
export default _default;
